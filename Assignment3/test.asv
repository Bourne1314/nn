
class = ones(100);
pics = magic(100)
classGlass = [1:1:100];

classGlass = classGlass';

% Reset the random seed
rng(10);
% Separate the data into 10 different data sets. Indices(x) indicates that
% element x belongs to a particular cross validation
indices = crossvalind('Kfold',class,10);

% Different selection strategy. 1st example of every person 
% to be in fold #1, the 2nd example of every person to be in fold #2 
% and so on
%indices = repmat([1:10],1,40);

% Data folds
data_folds_indices = [];

% Separate the data set. Each fold in a row
for i=1:10,
    tmp = find(indices==i);
    data_folds_indices = [data_folds_indices tmp];
end

% To store the errors
errors = [];
nets = [];

% Store the nets for every cross validation set for this number of
% hidden nodes
tmp_nets = [];

% Store the error for every cross validation set for this number of
% hidden nodes
tmp_errors = [];

% Go through every training set
for i = data_folds_indices',            

    % Get the test data
    test_indices = (i);            
    test_data = pics(test_indices,:);
    test_classes = classGlass(test_indices);   

    % Remove the test data from the training set data
    data_indices = data_folds_indices';            
    data_indices(i) = [];

    % With the indices get all the inputs for this particular set
    training_data = pics(data_indices,:);
    % With the indices get all the classes for this particular set
    training_classes = classGlass(data_indices);
    
    training_data
    test_data
end
