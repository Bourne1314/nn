function [input_data target_value] = create_network_input_and_target_data( ...
        data,...
        features, ...
        k ...
    )
    input_data = [];
    target_value = [];
     
    speed = features('speed');
    angle_of_movement = features('angle_of_movement');
    distance_to_source = features('distance_to_source');
    diff_angle_of_movement = features('diff_angle_of_movement');
    avg_speed_from_beginning = features('avg_speed_from_beginning');
    avg_speed_w = features('avg_speed_w');
    var_angle_w = features('var_angle_w');
    var_angle_from_beginning = features('var_angle_from_beginning');
    if size(features('centroids'),1) > 0
        angles_toward_centroids = features('angles_toward_centroids');
        distance_toward_centroids = features('distance_toward_centroids');
    end
    angles_toward_center_of_mass = features('angles_toward_center_of_mass');
    distance_toward_center_of_mass = features('distance_toward_center_of_mass');
    global_mean_speed = features('global_mean_speed');
    distance_from_nearest_agent = features('distance_from_nearest_agent');
    distance_to_building = features('distance_to_building');
 
    for i=1:size(data,2)/2,
       input_data_const_size = [ 
           speed(:,i) ...
           angle_of_movement(:,i) ... 
           distance_to_source(:,i) ...
           diff_angle_of_movement(:,i) ...
           avg_speed_from_beginning(:,i) ...
           var_angle_from_beginning(:,i)  ...
           angles_toward_center_of_mass(:,i) ...
           distance_toward_center_of_mass(:,i) ...
           global_mean_speed(:,:) ...
           distance_from_nearest_agent(:,i) ...
           distance_to_building(:,(i*4)-3:i*4) ...
       ];
       input_data_var_size = [ ...
           avg_speed_w(:,i) ...
           var_angle_w(:,i) ...
       ];
       
       if size(features('centroids'),1) > 0
           input_data_var_size = [ input_data_var_size ...
               angles_toward_centroids(:,(i*k)-((k)-1):i*k) ...
               distance_toward_centroids(:,(i*k)-((k)-1):i*k) ...
           ]
       end

       input_data = [input_data ; input_data_const_size input_data_var_size];
       
       target_value = [ target_value; speed(:,i) angle_of_movement(:,i)];
    end

    % Replace NaNs with 0s
    input_data(isnan(input_data))=0;
    target_value(isnan(target_value))=0;
end