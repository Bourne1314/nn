function [weights] = perceptron_a1( )
    % input samples
    X1=[rand(1,100);rand(1,100);ones(1,100)];   % class '+1'
    X2=[rand(1,100);1+rand(1,100);ones(1,100)]; % class '-1'
    X=[X1,X2];

    % output class [-1,+1];
    Y=[-ones(1,100),ones(1,100)];

    % init weigth vector
    w=[.5 .5 .5]';

    % call perceptron
    wtag=percep(X,Y,w);
    % predict
    ytag=wtag'*X;


    % plot prediction over origianl data
    figure;hold on
    plot(X1(1,:),X1(2,:),'b.')
    plot(X2(1,:),X2(2,:),'r.')

    plot(X(1,ytag<0),X(2,ytag<0),'bo')
    plot(X(1,ytag>0),X(2,ytag>0),'ro')
    legend('class -1','class +1','pred -1','pred +1')
end

function [w] = percep(X,Y,w_init)
    w = w_init;
    for iteration = 1 : 100  %<- in practice, use some stopping criterion!
      for ii = 1 : size(X,2)         %cycle through training set
        if sign(w'*X(:,ii)) ~= Y(ii) %wrong decision?
          w = w + X(:,ii) * Y(ii);   %then add (or subtract) this point to w
        end
      end
      sum(sign(w'*X)~=Y)/size(X,2)   %show misclassification rate
    end
end
